## 一、代码规范
1. **通用编码规则**
 [PEP8]  AI 代码补全时，必须遵循 PEP8 规范
- [STRUCT] PyQt5 代码必须保持清晰的 MVC 结构
- [SAFE] 不能随意删除、修改、重构已有代码，除非特别要求。
- [CONFIRM] 代码修改完成后，必须弹出 "Accept All" 提示，不允许直接覆盖代码。
- 
2. **ASR 模块规范** (Vosk/Sherpa-ONNX)
- [ASR-FLOW] 保持现有 ASR 处理流程不变：
     - 模型加载顺序
     - 音频处理管道
     - 推理调用方式
     - [ASR-API] 禁止删除/修改现有公共方法签名
     - AI 不能改动 ASR 处理流程（如 Vosk Model 加载、Sherpa-ONNX 推理）。
     - 代码优化时，**不能删除** 任何已有函数或方法，除非明确指示。

3.**RTM 模块规范** (ArgosTranslate/Opus-MT)
   - [MOD-SEP] ASR 与 RTM 代码必须物理分离：
        - 独立目录结构
        - 禁止共享处理管道
   - [RTM-CORE] 翻译模型核心逻辑禁止修改：
        - 模型加载方式
        - 文本预处理流程
        - 结果后处理
- ASR 代码和 RTM 代码必须分开处理，不能混用。
- AI 不能调整 Opus-MT 模型的翻译管道，除非明确指示。

## 二、版本控制
1. **代码提交**
   - [LINT] 提交前必须通过 `flake8 --max-line-length=120` 检查
   - [TEST] 涉及核心功能需通过现有测试用例
2. **Commit Message**
   - Git commit message 必须包含：
   - `[ASR]` - 变更涉及 ASR 代码。
   - `[RTM]` - 变更涉及翻译模块。
   - `[UI]`  - 变更 PyQt5 图形界面。
## 三、版本控制
# 交互规则
- 代码修改完成后，**总是** 提示 "Accept All" 选项。
- 代码修改必须 **逐步进行，并给出详细解释**，不能一次性覆盖多个文件。
- 代码补全时，**优先复用现有函数**，避免重复实现相同功能。
## 四、维护规则
# 维护规则
- `.cursorrules` 变更需记录日志，确保团队成员理解最新规则。
- 重要修改需同步到 README.md 说明，确保一致性。
